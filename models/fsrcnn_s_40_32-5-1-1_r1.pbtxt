node {
  name: "images"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "feature_extraction_block/feature_extraction_w"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        tensor_content: "#\017\306\275\266\227\177\276%\021\255=\267\331\203\275\203\036?>\217\007\375=\261yE>i\264D\276\027A\262=_\021\265>\204\224(=\017=\325<\0348\202\275|\242;=\":\324;A\305\340=\301\246\261<\257\332k\275P\3202>\r\301\331<\267\200\243=\032\r\r\275\311\322\325\275\363\263\341=Up-=\307\034+\276tt\211\275\371\r\340\275\034%\326\276\034l\342>\252\375\230\275<L\221>\304K\037=\336\016d\275W\275\">~\017\236\275\201\365\202>\313\2749<\001\201\344\275U\032\227<\036z\242>\233\263\247\274\227\314\n>\355\330\017>\257\361V\276a\211\323=\336n\200=\370\005\272=\263\341#\276$\022G>`\223\225\276\347\347`\275S\276d>\220\227\336=Q\351\220\275\355\202\007\275\364\331:>\342\033\237\276\255\261\'>\005\212O=bh\371\275\t\370~\276\000\313\235\276\335\312\233>\342\235\370=R\326\220\276\022\234@\275L\265?>\013\177\376\275\253\306\016>\007\216\333=\037\021\272\275\254\237\357=\253p\211>\002F\245>\253\n8\276]\245\206\276\302x\016>1=\314\274\016%S\276\330\356v\275\034\020H\276R\220\252=\177\301\374=j\373J>\244\252R>&\224\310\275\302\256\232\276Q\332P\276=NG\275\001\250\361\274;o\331\275\327\035&;\314\030+=iA!>}l\207=\030\271<=\3423j\276\235n\347<\226-h=\320i]>\014}\313=\010\213w\276\327\0073\276\246\376\325\276\032\341*\275\026\345\003>\224\210\005\276\241\262\326\275\n\025\304=<Y\305>{\377\016\276!\226g\276)\274\034\276\357\346\234>M\361c\276\023\242\242>o\350\217;G*\244\274\350L\017\276\2529/<\306\252\320\276\203W\030\276V\262\320\276\373\337/\274\310\222\242=\323$|\275\203\240-\276\304By<3N\274\276,\300\234=\3029S\276o\003\333\275 %\310=k\200\315=;\261\206\275\027\270\023\276\222\215!=,T\220\276,\346{\276\347 \201\275\326(\t\274\333\001\007>\225B\223\276~:\217>$!\231\273\303\242\004\274\231p\217=d\014\345\273V$\031\274\334\322=\275\200\230\212\276\n\343~>\000rR\275\005v\217\274\371\240\364\275_\343]>\210\234\257\275A\201\322\275_\031Y\276\376\367\301\275\313/w>\320\3653>2\205\236>Z$\251=Y\031g\274\303\001\261\273\345:>>\276\035B\276\244\371\202>g\030\310<\027\030\223>:\310\351=|\014 \276m\317\261=\366\207\317>\'\253\224>2\360\314>\215!\305\275\251\023$\276/YJ\276\341x\303\274\373\244\347;\305\267\025\276L\376\325\275G;\256<1\365\320=F\361\032\276\222\202\210\276\253\303\254=SQ\370=\031\340)>\254\317G\276`S\017>\307\312\274\274\326\352\207\276\203\232{>z\326\332=\247Z\355>\376\320\342>\261\034Z\276B\010\304>\300y\006\276\014T\377=P\376\032\276-l\377<\360\360\t>\372\003\212>V\357\022\276J\314F\274\264l\252\276G\237\247\273(\237\302\274g\370s>f\021\323>\261O\323\276\\~\222\276\314\344\270\276Tx\307\276\002:X\276\023\030\036\276B\037\276=cI+>\355K\031\276\027\330\260=\254\027\335<\356u\227\276PA\230>vc\217>AC\r\275G\200\301\276\023ZW\276\343u9\276K\"M>7\271\304\276\272\352\266\275\331a\364\274\275W\302=\271\253#;=\331\223>I\256\352<\252\337x<\357@\366\275)\346\265>?\205\242\274p\372\301>G\342\n\276\\ \323=N|\310>\031\354G\275\265\'\331\2751^O\2760.L\275\330Lm\276t\260o\276-mX\276\312\372\264\273\321\037\332=\264M\260\276\340\373\245\276\256\277\230=\2429\346\276\216D1>SE\243={\352\236<\377\260\311=\334\346\013=\031\2338\276!\357|>\262\373\305=,a\274>\200\255t>\320O\010\276\341\021C\276S=\232>\003\006\234>x\212\243>\033gp=VL$\276\365,q\276\231W\266>\271)\202>$\371\215>A\3337>\221\210z=^\222\366=\277\327&>\326T\227=9\275\370=b\"\200>\360\243\033\275\215iD>\344&c=Fz\247\275\231\365S>\353v\031<\353u\211=\020-\233>wV8=\027\\\217\275\262Z\251\275\3242\201=+Z\243\275\277=\260\2755\272\203>P\n\252>\2043\265\275\223\030\352=\376%\311<\374\3412>\032@F=*\225\007=s\010\315=\305\307\211=\205\247\010=l\337\304\274\242\273\224\275\221\205\315\275\005\023A=\215v\266\276\013\266\037>\0366\366=\204i\214>\330\375\026>l\321n=\032&\016\276\344FD=\024\351\336\276\352\302v\276-\325(<_8A>\265H\n\276\300\236#\276^\353U=\37056>\016kP\274\215}O;\026\3444=l\322\177>E\343\342=j\031\305>\201\037\252\276$\335\223>\230\252~\276}N >\216\377>\274\321\037\277\2757\315\027>\223\037\362\276\255\362\205=lUw>\211\337\227\276\266l\211\276\025c\202>\257}\231>\004_\313=\375\346#\275\330}L>\213h\314<.\213\307\275\322\232\235\276\261J\223\274E\000\026>\210\034F\276\233\210\271>LA\252>jc\251\275\272+\302=U\210\204\275\275\225\264:^}\210>&*U>&s\260\276\275O\244>\215\241\016\277\022/\202>\026\212\374\2753\3172\277\213\227\210>\016\376\007?\363,P>\033\r \277\005\253o\276]I\253=\340\205\237\275(\271\320>PfK>\313\357\373=RW\277\276\343Yo>\371\n\035?P\030?>\217q\226=X^\034\277\006?\360\275\253\270m>\316\241\253\275\332C\024\277\023\266\201>\222\243\311\275\210<n\276\206\036\246\2750\241\010=\234;\305>z\222\244>1\017\205>\227\225\223\275\035\352\002\276%\202\365>\333\n\335<\235q\343\276$\232X\276\265\016\345>\017\270\320>%\023\216\276\207\304\246>\274\214\325\274\360\241\372\275u\373\006=\264\352\201>\362]\">\022@\236\277;Ud\275\244_\025\276\337\221\213\276<\202\232>-\371\016>\036\366\205>x\355\025=\006\375\260<$Q\224><\327\220=\327\230\224=\376S9\276\333\2206\276\254ln\275PQ^\274\211\223\237;A\313\337=\021@\326\276.\017\226>\355H\230\276\001\215\016\275\365.\356\2765wH\276\240\363(=e\'\253>\032\360\000\276\300\'\035\276\374\376W=:wS>q\014o\276\356T+\276\231\224\270\275\305m\246;\336\215x=\324\007\256\275\037\374\341=\236n\274=\375\231Z>\310PJ\276r\277\251=\232\0161\276C\264\367\275\224\t\341\276\201}T>\232\207\013\275\247\314\323<\350.2>\rc\177>t\022\302\275\243Q\200>\016\3439\276G)I\275 \222f\276uB\355=gT\016\275fN\310<\010\006d\276z\331\266=\036\331^>@\252\315>\304\313|>\267\007\344;I\347\207\276\300\204\277\274\201\256\271=\331\024\341<s)\221\275U\036\213\273\362\270\214\276\223\030\306\275!\374w\274\214n\032\274T\006\252\275\352\\[><\276@\276\002\\\240\276S\020\366=\216\025\274=\212\301p\276\347L\237\276\240\320K>9\333\204>\373\224\264<NY\272\276\336R\022\276\020h\'\275\002\034\233\276\231c\272>\304\317\220>\213j<>#\352\361=K\201\321;\037\357\027>\225\335\001>\263\234+\274=/\301=<-\027\276\006\210\321=\210ft\276h\356\232>@L2\276\237U=>Z\024j\2768\345\235<y\210\253>\223\262~\276\t\207G\2766\351\247=\037\323\224\275\217\217\250\276\312\366\026>\335O&>D\241\324\275Nc;\276\004\371\020>\246Zu\276\252\267=\276\235\362\303\275I\321\265\276\177\021J\2765c%>\226\234\236>z\365\305\275\327\266\000<w\215\336\275IO\354=\224\007*>\025U\017\276d\'H\275.|\216=g\350\030\276x\260\363\275it\202>\0004\371=\010{I>y \004>\225\343\201>\007\331\017\275!\370o>\370\322\303>e6\204>\222\033!\276}\325\211\275\245S\002\276Q)\032>\316\020\222\276\005\207.>\341\362\034>o\332\215\276\362\241\362\275\345\370\245\276~\304 \276\240\216\222>+\3503>.\363\270=\023h\211\2769\216*\276\026\327\250<c]\343<g\250\026=\000<\242\274}\366\001=\372\306\317=^G\211=\256\326\316\275}X\356>\3128\202\276^@\210\275\327\004|<\274\260\016\276q\236\235=\177};\276\335\325u=N\231\t\274]f\221\276\334?\023>z\213\312\275\216(!>z\330\324\273\033\222\n\275\264\354a>j]E>\353\352\363<r\274%>\037\271\340=\016\315\254=Wv>\276e;\205<\003\272d>\207c`\275NJ}>h\302\223=\355\360\205\276Sb\200\276\r\256\020>\222S?\275\302\237t\276l\220\327<\037Hp>\216\310\357\275\0064>\275\271\000K\276d\031\201\276S\032\026>\240Ro>g\202\331\275\242\370/\275\014\207]\275ZP\245>+\031\214\273R\013j\276\0179\267=\005\225\003\276l\262V\276)\006\270\275[\210\253>6\350\254=\312\276\233=-|=>4\214y9\303\022\327\275t\336\344\275\266}\242>jjq<\325\352\205\276\216J\345=\352\016\321=\3729\250\276\331\244\372=\265/o\2750%N\276!\214\234>\257T\262=\232o\207\276=\270\205\276\000=r\276e\357\036\276[e\377=\3777\037>\032\313\212>\241T\024<\272\337T\276\245\357\313\274\210\212\241\276\270\264/=\362\370\t\276\323\007\007>y\230\360=\022{%\273\377\325;=Yv->\364\266\244\275B\237\375<\340\321\020\275\362\320\353=\355\252\341<\214\030K\276R\340\254\275\357\344?\276\3179\005\276\313.\365>\247H\000\276\204\220\253\276\341\222\001>j\363\266=0c\307=\005\243\334\275\360\261\227\275U\337\254=b{a>\214\2672>\212H\013>\025\203\346\273\267\274\006=\224\rk\276\307\236\234=PA\206\275\202F\263=]\263\232=\206\361z>\277~\275\275[\2512\276\267\266\333=\277\351\206>\3379}\275X\350\373:~6\013>y\230f=D\227\320=1y\223\276\227F\364=UF\374<}X\211>\317)\\\275]5w>\"tf\276e$x\274%\016\200>\267\262\317\276\"\306\236>\376\237l\276q\305v\275nah=\324\256\255>\034{\373=\"\007h=G\331\372\275\346,.\276$\252_<\276\223F\274\360jD\276.\031!\276\233\026\013=\272\316t\276\037\000\247\275~t\024>\t\014\014<\312\355\254=\"H\332=w\032Z\275b\265\223\275op\355<x\224\302\276\343\231\213\275\231\206\304=\'C\207\276xj\027\275\265\373\020>\255\371\205>Q>\275=\365j\200\276\321G\341\275\2271f\275\364\315\027\276\302\337E\276\014\205\021=\314a\236>\356\245R\271\333\025\347\275\370}\005=l\227\205=\264\312Q>H\312\017=\251\245\226>`\024W\275.4\376<9T5\276\2430j\276\337\214\301\2720\322i\275X\026\221\276U\204\336\273\256\353\370=\3561\362\276z\201\207>3\252\276\275\364;\301\275\225\026\005>\344\200\025=\210\341\024\276g\257\251\274\030\r\233>\013N-\275\005\201O\276\307\t\235\275~\013\016>A\265p\276\307\245\025\276\243\365G\276\257\232P>\017\214\245\276\241\010\232>\310\270\241\275i\032\270<4\262h=\204t\304\275\350\014\032\275\270\316\241>"
      }
    }
  }
}
node {
  name: "feature_extraction_block/feature_extraction_w/read"
  op: "Identity"
  input: "feature_extraction_block/feature_extraction_w"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@feature_extraction_block/feature_extraction_w"
      }
    }
  }
}
node {
  name: "feature_extraction_block/feature_extraction_b"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        tensor_content: "X\221/<o\275\250</\330A<\253\033\000=D\223\237\272+\003\325=Z\212\312<1(\343\275\013)\033\276\003\236\214=\241kq<\235\035d;\nu\356\275\264\300\034=\375r\014\275\260\014\037=J\266\026\276\216\324\367;\216\372\254;\"\002\252;\235W\211\273\275\006\352;\220\277\270<\347d\004\276\023\321\020=wW\016\276\346\251\027\275Z,\275\275\3274\245\275\032\242\301<H>\005;\355\332\204<"
      }
    }
  }
}
node {
  name: "feature_extraction_block/feature_extraction_b/read"
  op: "Identity"
  input: "feature_extraction_block/feature_extraction_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@feature_extraction_block/feature_extraction_b"
      }
    }
  }
}
node {
  name: "feature_extraction_block/Conv2D"
  op: "Conv2D"
  input: "images"
  input: "feature_extraction_block/feature_extraction_w/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "feature_extraction_block/BiasAdd"
  op: "BiasAdd"
  input: "feature_extraction_block/Conv2D"
  input: "feature_extraction_block/feature_extraction_b/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "shrinking_block/alpha1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        tensor_content: "/M\212?\307\366\233?\025\325\206?p0\200?\210i0?\353\334n>\230\335s?y\355j>#Va><9\203?\326\267l?q=\206?\245\037@>\341\273\201?\206\353\217?\250\005\200?\236\232\202>\256\240p?\006C\222?\216\206\206?$$r?pq\203?\336\245\251?&z\215>[\177\204?q\276}>T\263\212>=<\251>G\026v>\360\010\202?\254F\217?J\323\200?"
      }
    }
  }
}
node {
  name: "shrinking_block/alpha1/read"
  op: "Identity"
  input: "shrinking_block/alpha1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@shrinking_block/alpha1"
      }
    }
  }
}
node {
  name: "shrinking_block/Relu"
  op: "Relu"
  input: "feature_extraction_block/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "shrinking_block/Neg"
  op: "Neg"
  input: "feature_extraction_block/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "shrinking_block/Relu_1"
  op: "Relu"
  input: "shrinking_block/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "shrinking_block/mul"
  op: "Mul"
  input: "shrinking_block/alpha1/read"
  input: "shrinking_block/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "shrinking_block/sub"
  op: "Sub"
  input: "shrinking_block/Relu"
  input: "shrinking_block/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "shrinking_block/shrinking_w"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 5
          }
        }
        tensor_content: "\250\242\354;\262O\244=\001\333\036\276\244\032g> \272R\276\347ar=F\203\006>\312\345\243==\244>\276\220=D>#\302\233>\230\2556>-v\253=I\233\237\276}\252\010=\2512\221>\016\203\242=\003\362\234>\253\206\377=\030v\034\276F\302q>+\366\203>\255!&\276\030\315\333\275\034O\275\275\2546]\276\035c\323=\371\314v>\254p\233\276I\200\305=\373\246\226>\002\270\205>Hxz>r\242|>\006\265h>H\236j=\226\341\036\276`G~>^\372\214\276\310\333\240>\225^\306\276\n\213\243\276F\252\344\275\2366\274\274\210\255}<\247\333\217\276\0034A\276\025\350i\276]\374b\276\330!\255;kC\365=\261\356w\276\"\270R\275u\270\354\275\254jB>)w\260\274&\034n\276\212p\304=:\372\014>\270\235C\276\262S\000=\227\306\t>\364\3068<\264\267\247\276\313\034l>I\312\271\276\'\267\315\275h2\300\276s\226\025\276\'G+<r0\005>{\236q\2762\206\010\274\233\267\222;\325\213\357=\'\254\225\276\255\020]>\301\341\021\275~\201\205=x\376A\276\005\260\260=N[\332=\323W\260\276\215\t\">/\343\201\2753!I\274\205)\001\274\205\251\371\275\234\247\331=\367$\271\275\367\244<>tH\223>\021\326\267\274\364\307\366\275p\017z<\t\276E>N\013\341\275&m+>\305\214\024\276U\022\344\275\246\006W\275\"\0311=\256\266\201>\366\025\231>\034\210\027>\311\331\r>\213w\264>\031\340\211>\2026\367<\030\245\034\276\274\216\243\275\007Nj\276\027\232\260<\342k\253>\365J\215<\2158\314\275\243\244\356=*\343O\274+U\214\276s\215\025=\177\303\006>K\035\373\275\021\031\356=j\343s=\t/C\276\231\267\032>Q\323\246\276\347(i;\324\241\261>n\336i\273\352\306(=\230\374\221=\315\331$\276\321J1\2767\314\014\276\316\365\'>6S\353\275\216\034\267\274\003\232\340\276\265\252\222>\037\351\365=^5\342>\277\316R>\253\242:\276\250\336\354\275H\324\345\275\tU\377\275Z\014I>\256\177B>\320\343m=\rF\307\273yM\334\275\021\222d\2768N\277=\216:\214\275\330\347\261>\021\021\225=)\215\"\275\"\304\014>\005\"\245\274"
      }
    }
  }
}
node {
  name: "shrinking_block/shrinking_w/read"
  op: "Identity"
  input: "shrinking_block/shrinking_w"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@shrinking_block/shrinking_w"
      }
    }
  }
}
node {
  name: "shrinking_block/shrinking_b"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\243\r\034\274\261\317\3449\275\004/<\340\240\232<\030PN\273"
      }
    }
  }
}
node {
  name: "shrinking_block/shrinking_b/read"
  op: "Identity"
  input: "shrinking_block/shrinking_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@shrinking_block/shrinking_b"
      }
    }
  }
}
node {
  name: "shrinking_block/Conv2D"
  op: "Conv2D"
  input: "shrinking_block/sub"
  input: "shrinking_block/shrinking_w/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "shrinking_block/BiasAdd"
  op: "BiasAdd"
  input: "shrinking_block/Conv2D"
  input: "shrinking_block/shrinking_b/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mapping_block/w3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        tensor_content: "\353 \024\276O\212}>\341\342\341=@1/\276\273)\236>\014b?\275Y?\355=\265 \t<>\211T\275>\214\213\275\217p\243\276\320\265)=yFr=!\225\251=p\373a\276\254h)=\357\306\266>_\375\302=\351\202\212=\323\n\177>\027\374\266<\321\315\322=\335V\333\274\3449\226=\310Et\275\345\255\005>\252\306\023>\363\233\246=\371\2477>\267Q ;F%\360\276P\330\036>nP\341<\315v_\276\300\334\247\275\342,<\276\317[\210\274\335\202\017=hT\240\276\rX,\274[\210\325=\260\325\361<z\343\032\276\314\275!>\207\366>>x\341@>^\250\272<I\362.\275\037W\210>\212v\217\276n\370\016<\301%\266=\306\014\257=\230{\205=\373\000w\276Q\244\001\276-0\023=\213\024\346=\304\020\221\275\033\300\212\276\354N\210\276\207\tY\275\277\245\217\2753\214\033>\240\032\014=\335\236\215\274\302#\261=\304%F=\220;\361\274\354\235%>?\241\236\276\342#\010>!\303z=$\2557>\213\354\323=d\026\026>\366\0161\274\204P\316<+\213\016\276\247L\250\275\023\205\\\276J\020\223\275\246\360\305\275\204\004\325\275\352?2\276\271d\233>s+\341\275@\302j\276\302V^>~Fp=b\t*>G\2060\276\311Nd\276l\257H\2764\n->\032m\260>\244\025\270=\317!\206\276\242\203\351=\001\001w>sz\345\274o\356\037\275\316\315\201>\035\324D\276\330\363\311=\t~L>\341\036\207<\334\342C\273\352(N<\272:\275<\200\260k>w\377\314\275\313j\264>\304\356\301\274\021\343?>\262\343\023=\232\216\353<{\3420>(*\222\276\230\\\333;\340\332\352\275\234\316\236\276\354\234/\276\245|\000<{(\201>t@e>\\8\037=S\230?\275\374\021\200\276\033v$\276\000WF=\205\256\031\275[D\205=<-\035>\317\321;;\270\210\301\275A*r=\332\342\n\276\245\274\202<{\374\300<\260\272\277\276\237\262\r<^\326\277=fg\024=n\2105>fU\037\276:3-\276\221\021\216\275\325\333=>\216\372\210\276+\216\020>E\203\313\275\230V6\275\217\215G<G{\243\276\005\346\237\275\226N\n<\261\262\n<\016\253\235=\372\227\347=\351!)\276\373\312O\276\014\304\254\275\374T4\2754\270\213\276\227\330\210\273\272\354\t\275\360\206\337\275l\362\035\276c\376\320\275A1T\276\210\272\014\275\363p\334\275\244\0249>-\370#\276\277q_\275\003\300\250>\340t\276\273% ^\276\246\341B\276\224\317\323\274\257\352\005>\006\361\267\2755\3042=\035.\243\276^s\363\275\252\335\234>\0364\030>\272\234\376\274w\000,\27659\245\275wx~=\212\232\336\275o+\">\261[g=LL\230\2761g\253=>m\360\275\212\232\242\276V\327k>)\2774<]i\000>\331z\020\275`\205\303\275\'\2430\276L\t\371\275\204U\322=\367j\005>\200\311P\273..\256=\226\030\232<\275\002$\276F\230j\275\302\370\266\275\341\005\371\275\rw\340<\375I\235<\221\321\363<\304\344\315\275\314\010\360=Gv\002<\206\235O\2758\317\212\274\245\316\000\275\261\032\236\276"
      }
    }
  }
}
node {
  name: "mapping_block/w3/read"
  op: "Identity"
  input: "mapping_block/w3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mapping_block/w3"
      }
    }
  }
}
node {
  name: "mapping_block/b3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\267\355\221\274\346q\343<\"\364\035\275K\273\264\275\224\271\030\276"
      }
    }
  }
}
node {
  name: "mapping_block/b3/read"
  op: "Identity"
  input: "mapping_block/b3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mapping_block/b3"
      }
    }
  }
}
node {
  name: "mapping_block/Conv2D"
  op: "Conv2D"
  input: "shrinking_block/BiasAdd"
  input: "mapping_block/w3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "mapping_block/BiasAdd"
  op: "BiasAdd"
  input: "mapping_block/Conv2D"
  input: "mapping_block/b3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mapping_block/alpha4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\211I\352>\352\027\201?\305!\225?g\302W>\0201\207>"
      }
    }
  }
}
node {
  name: "mapping_block/alpha4/read"
  op: "Identity"
  input: "mapping_block/alpha4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mapping_block/alpha4"
      }
    }
  }
}
node {
  name: "mapping_block/Relu"
  op: "Relu"
  input: "mapping_block/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mapping_block/Neg"
  op: "Neg"
  input: "mapping_block/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mapping_block/Relu_1"
  op: "Relu"
  input: "mapping_block/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mapping_block/mul"
  op: "Mul"
  input: "mapping_block/alpha4/read"
  input: "mapping_block/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mapping_block/sub"
  op: "Sub"
  input: "mapping_block/Relu"
  input: "mapping_block/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mapping_block/w4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        tensor_content: "\360J\310\276)\243U?\265+\273<i\241)\276\022\347T\277\354\332\340\275\356\327\366>\204Y\017\277\366\217*\275OKt\277\242\374\322\276D\363\t?\251\343,?\332\030\353<\266fW?\027%W?y}\013?\031\010\320\276\272?\244>\216\307s\276p`V>-\3453\277+|\341>E)\234\276^s\017?"
      }
    }
  }
}
node {
  name: "mapping_block/w4/read"
  op: "Identity"
  input: "mapping_block/w4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mapping_block/w4"
      }
    }
  }
}
node {
  name: "mapping_block/b4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "gE\217<\014Z\003\275\324\321\345<P\250\200\274\333\310\205\275"
      }
    }
  }
}
node {
  name: "mapping_block/b4/read"
  op: "Identity"
  input: "mapping_block/b4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mapping_block/b4"
      }
    }
  }
}
node {
  name: "mapping_block/Conv2D_1"
  op: "Conv2D"
  input: "mapping_block/sub"
  input: "mapping_block/w4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "mapping_block/BiasAdd_1"
  op: "BiasAdd"
  input: "mapping_block/Conv2D_1"
  input: "mapping_block/b4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "mapping_block/Add"
  op: "Add"
  input: "mapping_block/BiasAdd_1"
  input: "shrinking_block/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "alpha2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\n\246l?\327b.?k\251\251?\334\346\253?\204\262\211>"
      }
    }
  }
}
node {
  name: "alpha2/read"
  op: "Identity"
  input: "alpha2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@alpha2"
      }
    }
  }
}
node {
  name: "Relu"
  op: "Relu"
  input: "mapping_block/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Neg"
  op: "Neg"
  input: "mapping_block/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Relu_1"
  op: "Relu"
  input: "Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "alpha2/read"
  input: "Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "Relu"
  input: "mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "expanding_block/w5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
          dim {
            size: 32
          }
        }
        tensor_content: ";\370\326\276a\3255<ACg\277\262\211K>\341\225\246\275\224\337o\277f\n\203>\024\207P>\372\031\316\276(\317\350\276\010\351p\277w\010\252>;\365x\277:\304\222>L~/\277\336\033\222>\023\014\254?\324\273~\277\013\241\356\276\331\r\r>^\317\003\276\215\215\263\276\260@\213\275=\234\031\277R\300\240>#s2?\273\302\020\277\277Ki?\366i\353>`bc\277n\3704>\212\217\205>\235{\257\274O\025\'?>\273\375>\025a\223=\334:\023\277\375\003\256=r,\214=\036\322\025?\r\361\227=\360\360\341>\200\257\031\277\342\364\237\276\022t\275\275\256\312\010?Cy\014??\211K>\321 ,\276(\2541?\202SK\275\274\241\023\2777\037\221\276\361*\213\276+\237!?\377f-\276\035\211\335<\311\375\210=\335<R>\365\275\362=(1D\277\325Y)\276 I-?\000Xu\277\220K\001\277\333\211E>I\002\322\276\020)7?\357\033\023?*X\357>\333a\005<(&\220\276\342\317l?\1772\033?\242\024\260\276A\322\027?\007\265B\275\212\264\252\275~\374<=\261\"W>\232\2426\277_\212\023=V\274/\277,\301t\274J\373\310\276\343\253\343\276\233\247e\277L\037\345>\244\346\210\277\224\346\177?2\334\372>\365hf>:kU?\336,\222>\340\331b?K\350X\277\226W\036\2773\013c=\345\323\t?s\220\"\276\366\336\277\276VS\242>{D\376>\010\342\214>\320\350\207?$\215+\276M\210(>\023\202X\275Vt\260>\370\200\370>\007\'\360>6\213\355>\322\224\345\276\225\030\224=\362\215\035\277\227L\021?\035\021\326>[\261q>!,%\276\tV\201?\231o\217\276\237\334\323>\273}\234<\006\201`\277\330\004\207>>v\205?i\243_\276\265\232s\276\347>\026?GG~\274g\034/?\261\317\037>\344\227\037\277~ \">)1O\277\370\037\237\276\365R\364\275\031.0?3\305\317\276\371\0337?ZI-\276\336y\222\276\377:>\277\302\212\\\276\270cw\276\"#{?f\027\356=\035(_\277\032\345\222\277\016<=\276\014\303v<\226\375\013\275\252h\220\271\262\360\262\276:\366l\2765hN\277=d\016?\264\263\204=\350\237\002\277\302\243\250\276"
      }
    }
  }
}
node {
  name: "expanding_block/w5/read"
  op: "Identity"
  input: "expanding_block/w5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@expanding_block/w5"
      }
    }
  }
}
node {
  name: "expanding_block/b5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        tensor_content: "n\272\341\274\273\326Q:\177\370\237=\243\005\010\274slh\275\202\322\202\275\013\273\371\275?\233\000\275\254\013\224\275\'\033\221\275=s$\275\301Q\032\274\"\177\270\2742\007\244\274\352\322\203\274\264\207\325:\237\333<\274\363\336\376\273\250X)=\260R\006\273f\031D\275\247f\r< \302\001=\254\001\331<\000\020\000>OO\030\275>\2360\2750\345\351\275\255\317\222\273x\334X\275\237r\263<\r\227J<"
      }
    }
  }
}
node {
  name: "expanding_block/b5/read"
  op: "Identity"
  input: "expanding_block/b5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@expanding_block/b5"
      }
    }
  }
}
node {
  name: "expanding_block/Conv2D"
  op: "Conv2D"
  input: "sub"
  input: "expanding_block/w5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "expanding_block/BiasAdd"
  op: "BiasAdd"
  input: "expanding_block/Conv2D"
  input: "expanding_block/b5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "expanding_block/alpha5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        tensor_content: "X\303\220>\031\0242\277\r\215[?\244\277!\276\002\351\215>\r\320\302<\247\203-?\004\367c?\356\301\242>\322\025\200\277\363\242y> Fp>\205\341s>\034\026\236?T\354\226?j\262\"\277\021m\316==\214\334?\327\002\216>\312K\022>\223\377\316=\213\330g>\003\363\342;\213+\362?\252\277\021>\200\320W\276\037\330P\277\2014R\277\216\243\354=\022~\364\275\217\221\235>4\205U>"
      }
    }
  }
}
node {
  name: "expanding_block/alpha5/read"
  op: "Identity"
  input: "expanding_block/alpha5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@expanding_block/alpha5"
      }
    }
  }
}
node {
  name: "expanding_block/Relu"
  op: "Relu"
  input: "expanding_block/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "expanding_block/Neg"
  op: "Neg"
  input: "expanding_block/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "expanding_block/Relu_1"
  op: "Relu"
  input: "expanding_block/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "expanding_block/mul"
  op: "Mul"
  input: "expanding_block/alpha5/read"
  input: "expanding_block/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "expanding_block/sub"
  op: "Sub"
  input: "expanding_block/Relu"
  input: "expanding_block/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "deconvolution_block/deconv_w"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 4
          }
        }
        tensor_content: "\244\235\203\273m\226H\2754\035\350\274Mf\033\275\345Q\003<\231\375\361\273\000=\3308\251\362\215;\rt\026=\n#\226<\334\022\003<\364\241\n=Zf\302\273\245Y\320:\013?Q\274.{\204\274\372\300^\275\223N\253<\213z;\275\000\207\276<\335\030\317\273/\354\n=\371^|<\307\350\244;\275\342\242\274\027f[=\315\312L\275\254\301};m\300\345:\370C\3319J\301\026;D\371\330;;0\002<B\311\230\274s\262\276:\271\3665<\205_\230:;X\251\273\022\210\024;\223\320V\274f\3307\275\037<\333<\002\203\252\273\\\354i\273\215_\311\275\3471><3\\B\275\030\336\022:\037\001\360;\317\005\362\274\232\030\244<\211~\337\274\244\255\353;\225\331I<\252 s<\005(>;P\373\023\275\031\027\000=f\t\252\273\031\270\321<\363\213\265\273\204j\211<y+E<X|\232<\t\030o;\257X\237\274Q\375\351\274{\344R\273\326\177C;\320G\362\274\354&\375;\343g\233\2741e\306\274\230\325\247\274Chy\274\032\344\360\274\345]f\274\356\245L\274\370m\177\272\021A&\274xy\033\274L{v\275\"Kp<F\250\227=\337\034\365\274\305\256 =\240&\035<1\032\200<N\315\334\274m\246\311;\253\247)\274cJd\274\\\365\336:\275\365n\274\204H\231\274\'$\244\274\014\246\234\272\315:\311:\361\252\373<V\365t<#\034F<\351\3516<\036\355a<D\374s<\270\374-;\2537m:\020\277\242;E\252V\274\037a\306<e\235\312\273\3242\334;\376o?\2749\320\324=)\342\210\275\244Q\304;o\272\017\275\022\210I\274\357\353\2367\231]\345\274\037\031`\273\337\n\034:<\313\036\273Kkc\273#2(\274\253v=\274\255#\341;\202\370 <m\371\036;P\351\372\274\373\364\027=\033M\n\275\262p\016<>\355t<\0358\225\272W\245B\274\372\345h\274&\324\"=}rS\275\355\247\262\272Y\031\213\275\305C\200\274\377\022\236\274;~h=\213>\373<\032GI\275\247\353\245;\261:\235<8S\217\274\334\352?\275\365\003\006\275+A\337=\222\267/=z0\247\274\33572<\253t\375\272X\364\310\273\272@\202<\265[\207;\210my<a\"\300<\0232\331\274\306Nw<\322\211\237\274\\\274\350\274}\000G<\260s\000\274\201\257\363;Z\323\371;\314\234\340\273j\242\337\274\311\366\252;\276#\230;\030n\235=\255_\355<H\343k\276\001\374\016\276j\354\220<68\026\275n\227\246\275\324\nG\275\210\266\314<jJ&\274\3538\264<\203\n\247;h\355\021;\335\210\304\273\335\221!\274N\007I\274\327A}<\324\020`;K\265\243<]qM;6M\243=\2765\370<c?\254\275\361\351\227\275\247=h\274\347\007\216;\320;4=~J\017=hsZ\275\363\022\023\273 \330\013\274$ \206<\246\006\356\274\213k\027=\264\221\331\274:\227\010\275.\322\345\275\253\373|;\365\323&>\222\037\223=V\031J\274\342\353\261\275\024\236t=}\247\224<0Rb\275P\353\331<9\254\361;\025k\030=\251\350\027\274s\350R=\257{b\275z\325h;\025\303}\275\264\336\246\274yC\025=\255\361\236=\017)m\2744\371 \274R\314\376<\3005\237<\020\376\260<\350\370\205;\304c\255\273\031\306\243;\265P\007\275)aR\273\376UT\274\353G\203<])g\275\216\370\223=@\031\035=\024_\371\273\365B\253<IR\215=r\346U\275\203\220\013\274\252\377\3119\003\227\";\231\243\357\273\007q\227:|\004\227\274N{\025\275\224\270\n=(n\320<\331\027>=\214;\273\272=V\214<-\272\005\274\307\"\253\273\006\217\355;\210~\220;\021\350 \274\327\366\246\274\036\361\206=?\367\301;\256j\006<\017\213\356<\343\315\035\275\312\3620=2\0301:\255\263\344\274!lT\275\251\\\203:\033\362\032=\357\257\330\273\3020\177\275\n1\033=\301}\336=\306\305\317:\225\351r:k\263s\274u]\004=\357/\016;e\207j<\200\340\303\274\025\242\307\273\366\310\013\275\332RE;\366Vb\273\2478\350;R\336s<\236\365i\273&m\032\274,O\234\274\330\230\356\274]\300\331\274\031\323\347;S\363C<\373xa=C\002\021=l[6\275\003I\213\275\327\226]\274S\234!=\356\016v\275\230\323\224\275T\037h\273){\205<\rLO\274\327\236\022:$\215x\274\2024\017\274E\003\000\273H%,<z/b\274\333>c\274\326\303\242;\213Qn<BF\331\274Y\324X=\207\034\204\273\273\265\204\275\204/\301\274}\346F\275F\254f=\213&\'=\332\2632=FE8\274 \364\304\273S!\360\272\227\000\r\275\371\010T\275C\321\242=\263\313\242=7U=\275\001`\003\275p\245==e\014\372=\355BX\275\317\317\023\275\005\261u;)z\016=L\367\342<\312\315\225\275s\302\221\274XI*<\364\3737=\007x\253\272\363\202\022\274*\027\n\275\221N\031\274\037\034\265;\375\202\000\274\304\272\006=\336\315\252\273bc\r\274\213\026\225;Y\334\t<\243\'8=\016i\221<\371\377\244\274\274\241\013\275\313\234T\274\316\r\355;\206.\212\274\343_{\274\220\234\340\274\360\220v<\024e\036=\203\303K=\376\270\272=\346\262\273<\366~\204\275\222\356\265\275\224\344\214;J\231\324;-\032\211\272\371\345\005<\021a\247;Tn\323\273c4[\274\346oE<$\310\335<\016\320\034\275Qu\303<\261\004:\2750\237\353\2735R\217<\372\2736\272\016k\200;\204\301K=l\013\216=\335\242\231\274\243O\256\273\227$\247\273v\206\027=.\366\225\274\237Q\203<xuP\275\200;\261\2746\355\315\2744P1=\367\233\226\275Q\357\016>L\033\201\275\321d\341=8\3331\274L\330\007\275\033\372M\273\305W\234<O\2455<F\\\271;\347O\021:_\320t\274\210H\251<;\266\207\275Ham=\256\212\r\275r\244\005\273\245\302\025=\201 A\273\346T\251<\005\343(\275=\2147=\305\343\372\274\323S\210=S\263\220\275\261\376(=\253\265\240\275\377?\356=\371\252\311\274\200S\220\272\370X\364<;\305?=\206\305\235<\314\207\352;\300\037M\273\250^\020\272\246\226&\275`g <\336\245\271\274\315CA=Y\344\221;l\036\200\272\251\217*\274\237?\003;\0376`=\326\002\275\275\202qz=6\001\204\275\345\326==IJ\302\274\257\310\017\273WD;\275r\004\243\272\246\301-\2758\207\023<\325\362\031\275\014|\217\274K\017\224\2759\254&=\210\334\010\274\216\3542=\247r\221\274\272#\263=\'45\275[\3323\275\3675\203=J\356k\275C%\224=\372\373=\275\324\207\271\274\361\323\347<\3428;=\301\373x\273\204\235F\275\267\017\332;\323\260\000\275\243\305\241\271\242\242\201\274wf\235\275\200\034#\275m\232X\273\035\006E\2742\306\033<t~\025\273\260\261\265\274\301\254\325<\032V\000\275h\302\013<V\240\357;\003\344\232;\331\325 \274\335\2436\274\211\361\277<n\214\335\273\362\005K=\253\321\301\2757Tx;\023C\225\275%\300X<\26199\275\200\246\264\272\343v\220;\376;\204\273\022\020\205<\261\013\344\274Q\211\020=\227\305a\275\210\032P<\270\000\024\276\303\r\200\275D\346\020\276\274\372U\275\267\227\206=I\265\304<\304\350\000=\031\353j<n\354\323\275\240\244>\276\003\314G<%\330\374\275-9]>\233\030:>C\216\203=;\032\274<\344\210\212\275\207\323\330<:}\333\275a\216)<+M\243>,O\310\275oU\370;lE\034\276\262\371T< 5]=8(\225;\013\347\224=\245\245:=\352\227K<\2149J=\235\001l<\277\275\362\274\365\346+>5\236\002\275@\327\016>Mn\025>\313\317p\275\232\265\r=\226K\265\275\362Jp\275\222\200\234\275\347\210?\275[\226\260\275\376\370f\276CbV\276\260\357\360>\256\361j>x\314*\276\226\332\270\275\343\n}=\"\222J\275G\360\220=d\321\037=\210n\222=k+\235<\312\307\020\273\000I\327<\016R\257\274K\266D;\222\027\246=\276\247\217=\231\242\222=g\032\223=R\016\203\276(\367\316\273\307@\274<f\\\251=?\252\004<r\000n=9\310\277\275\210\025\210\275\025-4\276\262\277t\275\326\205A\276I\353\034\275\240\237\275\275|\334\356;W\324\323\275\000\207\321=H\306\275=.\277\330\275\024\231\363\275\242E\270\274\'\346U\2723\352\360\275\2171)<_*\014\276>+M<\245\006\312\274\245\010m\275F\360\001<l\237\001\276\322\354\315=8:\234\275C\233\310=\021A\324\275\221\221h>l\201\021\276Oxj<\245\331\371=\003\257\r>\247h\326=\037\246\353=dFH=\006\210o=Zz.\275\205\332F\274H1\2519ds4;\211\300,=\235>\320\274\240\370\240<\246\'\321<\336\344\355\275\354Q3=\225\270\345\275\001\025\350=\"\004\211\275\254\304\037>\031\307\270=\235w\241=\3736\016=\357[\"=\312\375A\2746y\205\275\244\371W\275\032/\256\275l\337m<\330\336\200\274\273M\036=\264\232\275\274}\352,\274^\215\243<\351\301\313\272\006\210k<\206O6\275\201\264\203=\345\031Q\2765\371-\275\335\365Z\274\205%\340<\316\335\276\274\032\264\357\274\233 \177<\353\356n=\013\031\344\274~\266\023\274Zh\276\275\032\326q>-J@\276\246\032\314\275\313\225\232=\306\262E\274\311\346\247=$N\214\274\210=\266<\035\313\217\274h\3230=\376T\230;\272}g<=\250|=\325\272o\2750\003\252<\316\363\305\274.\030\305\274x}&<\316#9\275\377\223\372\274g\353E<0\270<\275\355\326\346<@\234\351\274\"t\000\276\336fr:\320S\264=\300\243\027\276\344\245\024\276\260\010\034=\212zg>\363\250\311<\301\035\272\272\332\252\237<\025\376G\273\332\335\374\274B\371B<\344\n8;K9\377<x*\225<\006\030\367\273\247\205\211<\220k\303:D\255\250<!P\331\275\022\356\206=\272\021\030>\220A%<\226\215\316=\000m\235\275&\240\313:\004\242\t=\313\243D\275.\334\240=vd\t\275{\204\232;]v\177>7\013\021\276-oK\274\177\200\002\275v\'J>\275\212\315\275\033,\235\274M4\007\275\377C\262<\264\212o\275rt\237<\216\035\205=\371\352\236\275<\362\024>(\211\236\275\n\204\246=\256\256\n\276\033\231\370=\002\357\031\275\2276\227=*\337\354\274\352\007\013=\361\223s\273M\007\253<\352C\305\273\375x\332<xgs\271\373n?\274\262\243D\275\364h1=\261L\264\274\340\220L\275@\360\201\275\335)\022=\3717\367=\240\017\317\274\230\016\006>\342&\321\275f\034\311:!Y\026=\rpe\276\265&\215>h\372M\275\352`\212\274\034\322\010=3B,\274\376\372\202<\336\376\233</\267;\275\277\277\211<\n5\224\275\350_\277<9/\004\273\312\324\003\274`\354\336\274\277\016\034\272v>\355\272L\314\243;\273\366G\273\320k\341\274\'\007\037\274g3\010=\275\221/=o.\311\274y\2149<U\254\005\275\303\331\315:\202\352c\274\375\245\246\274\326\223\262\272*\233M\273\354\242.;\027:r<\342P\022\2750\370U=\313\353\361\274a\346\037\274\370\257\026=\223\304X=\365\253\3449\260\365\177;\272\277]<%\037)<\005\250\354<\345>\303<\336\232Y\274\2755\340\274\\\351\004;\250`#<\275\350%\274\003\254\252<\2539\2018\230\366\213<\024\364\274\274\025\251\332<w\301\263<{\324\r<\023\t\014<\276\233\333<\027\306\034=ye=\273S\240\223\274\302mU\274\355\005\233;\355\244[;G\374\375\272`\315\261\273K\274\032\273\236\243\230;\330\250\035:\022\006f<\231\221\017<\006D\331;tU\014<\0265,<\035!\033;\007\023\356\2741Es=\247Qq\275]O\260\274\nd\271\274G\330\232<\260\025\322\274\312_0\272\202N\350\274\024\324\267;`\210\233\274\017iu<\322=\326<*Zm\272\205G\362\274\303\027\255\272@\275y\274\364\331)=a\255\256;\"k\035\273\0164-=\r\263\344\274\363\367\364<8\234\330<\255a\266<\250\tC\275\205wu\274\225F\021<\372w\302\274\2548\201<~Z\030\275$0\251\274?<\312\274\021\333\363;D\235\231\273n\267\263;\230\330\302;U\004\351:\243\224\230\274\305r\013\2749\002\234\273U\305F\274-\r;<&\207^\274\344\217\004\274\367V\322;m\003T;4\374i\275A\n\013\275\002\2157=\367\225&=\304p\252<\250\004\233;\201z.;\241\360\272\274@|J\274K\305\311\274\031\256-\273TN\225\2734\324\216\274\332\232g<\343\233\270;\211\\/=\0364\247\274\272\320\010\274\260\313/\275heu\274\320\231\023\274\022hc;\004\027\260<9\204.<v\301\230\274{&\235\2752\355N;\330\205\324\275\354\367;\275\260\357\364\274\224\003\365<\353>\005=\005\316Q\275\204\010\037=H\312P\275\315\212m\274\314c\313\274\360\372\333\275\351m\004>\350C\024\276\033\361\254\274\330\261M\275\275x\024=\375+\223=#\212\304<L\265E<D\013\001=\313\027\376<\376\316G\274\031v\324\274r\026\276\274/\006\327<\027\323\n\275\025X\020\275L\312\231=\340\267\010\275\314B\002<\0310\270:\234Q5\275\207C\024\275\030-\023>\'\223\277=P\215\310\275\035\355\033\275\037\311\336=\017g\235=\266F\003\2769/R\275e\341\240<\365\244\214<.\345(=\031\2527<D\262\237\272\327%\016=\355\020\\\274\300\010\255<\245+\252<\250\257\302;\246\340\032=\372\316\014=f<\350<j\230\226=T\231\003\276%\303\262=\270\260\205\275\253\347#\275\010@r\275I\202L=\007\320)<\3053\252<\t\037\220\275c\233\267\274g\200\355;iz}=\367=\223\275|}\252\274R0\031\274\217\217B\274pC\036=\037\216\225\274\3477\303<\027\307\312\274P\276\206\274\177hu\275Q\026g<\230>}=Q\351n\274\333\236?\274\006\375\224\273\252\232\350<2k\227\275\254fD=G\027\267\274\370\007\202\274\203\262\224\275e\375\301=[\037u<\353\303d<<D\222<,v\014=Dn\033\275\246\037\301\274\211\027\\=\014U\313<\201\324\272<\245\037\"\274\260Q\266\274M\253L<\205\355\254\275\232\273\305\275\307}j=\273\374\267<\010\277w<\034\352\222<\201L`\272d@\304< Y\016\274\330M\307<\257\261w<\t\251\331<\242\254\256\274\252\325\202\275v~Q=m\r\006\275&\223\030<\010I\007<\357i[\272\272\210y\274\370\246 \273\335\336\004<m\227\224\274I\005\214<\211\353\033\274\310\373\215\275\020\277@=\t\r\333<76d<O\307#\275O&\313;\257~\311\2749h\306<`\025f<\371\216\005=>\037|<\027\177\016\276\351\272\202\275q>\264\275\226}\000>\314vL\274\007\321\376;\315!\204<\n\345S<a\021\032<\037\365\215<\036nJ<\007@c<\263B<\274\274c\007\273\314\001\255\273\271\361\341\272\372\216v<\275\343\013\275t\314\025\274T\210\261\274\340\316J<`$\222;\224\230\036\275\353\272\"\275\016\356\264<\224\241\240=\254\331j=\313dL\275l~\350=\235\0164>gB\264\275\367\366\322\275\265(,<[#I<\235\373\327;c;r<\204\323z<r8\201<\256\016\230\274\007Y\316\273<O\274\273Z~R;\255O\237<\354V\220<\t\213\253=\337`\246=V?Q<\251;\261\275\014D\215\274\230\261\245\2735\356\354\274\332`\202\274)\376f<*\377\214<\326^u<$\313\302\273\302\3104\2746i\035\275X\rS\275\300\367Z=\002\272\265\275X\341%\274\003\262\250\274\264\246\002>/U\010<\020\356\342<\007\317\003\275~?\'\275\224\n-<\367\202\2159\233\365\306<]E\355\274\233.\357<,\3537=\315\355\007=\262\261Q\275\003\320{\274\352mC<b~V=\360\257w<\t\315#\274\356DJ\273\221a\227<\325V\026<\213\336D<t\203\352\274\r\261i;\235\0206;G\014\016=\231\321\244=\230\274\355\274\336n\221\2756\025\027\275\303K&\275C\336`\275\305fk=\215b\365=\341;!=?L\260<\036m\212\275\323\'\253:\261\344\356;\340\017\202\274\223\254\223<\264\rx\274mb\373\274Z\251\232<\273\345\203;"
      }
    }
  }
}
node {
  name: "deconvolution_block/deconv_w/read"
  op: "Identity"
  input: "deconvolution_block/deconv_w"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@deconvolution_block/deconv_w"
      }
    }
  }
}
node {
  name: "deconvolution_block/deconv_b"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "t\255\370<\277x\351;\231c,=2\366\301<"
      }
    }
  }
}
node {
  name: "deconvolution_block/deconv_b/read"
  op: "Identity"
  input: "deconvolution_block/deconv_b"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@deconvolution_block/deconv_b"
      }
    }
  }
}
node {
  name: "deconvolution_block/Conv2D"
  op: "Conv2D"
  input: "expanding_block/sub"
  input: "deconvolution_block/deconv_w/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "deconvolution_block/BiasAdd"
  op: "BiasAdd"
  input: "deconvolution_block/Conv2D"
  input: "deconvolution_block/deconv_b/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "deconvolution_block/pixel_shuffle"
  op: "DepthToSpace"
  input: "deconvolution_block/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "block_size"
    value {
      i: 2
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
library {
}
